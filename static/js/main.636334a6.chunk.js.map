{"version":3,"sources":["Chart.js","App.js","index.js"],"names":["Chart","register","zoomPlugin","ChartDataLabels","Chart2","chartData","subtitle","displayValues","data","options","responsive","interaction","mode","intersect","stacked","plugins","title","display","text","legend","position","zoom","min","max","wheel","enabled","drag","speed","pan","datalabels","color","align","padding","right","labels","top","font","value","scales","y","type","ticks","callback","index","y1","grid","drawOnChartArea","App","useState","setDisplayValues","fromTime","setFromTime","toTime","setToTime","furnace","setFurnace","customer","setCustomer","material","setMaterial","partName","setPartName","partNumber","setPartNumber","process","setProcess","batchNo","setBatchNo","batchQty","setBatchQty","soakingStart","setSoakingStart","soakingEnd","setSoakingEnd","totalSoakingTime","setTotalSoakingTime","subTitle","setSubTitle","interval","setInterval","getTimePortion","item","timestamp","substring","setChartData","fetchPrices","url","console","log","moment","format","fetch","res","json","map","datasets","label","actualMv","borderColor","backgroundColor","yAxisID","setMv","actualOt","setOt","actualCp","setCp","className","selected","onChange","dateFormat","timeInputLabel","timeFormat","startDate","endDate","showTimeSelect","minDate","e","target","option","onClick","input","window","document","getElementsByClassName","html2canvas","then","canvas","width","height","img","toDataURL","pdf","pdfConverter","addImage","save","exportChart","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.636334a6.chunk.js","sourcesContent":["import { Line, Chart } from \"react-chartjs-2\";\r\nimport zoomPlugin from \"chartjs-plugin-zoom\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\n\r\nChart.register(zoomPlugin);\r\nChart.register(ChartDataLabels);\r\n\r\nexport const Chart2 = ({ chartData, subtitle, displayValues }) => {\r\n  return (\r\n    // style={{ height: \"600px\", width: \"1900px\" }}\r\n    <div>\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          responsive: true,\r\n          interaction: {\r\n            mode: \"index\",\r\n            intersect: false\r\n          },\r\n          stacked: false,\r\n          plugins: {\r\n            title: {\r\n              display: true,\r\n              text: [\"Time-Temprature-Carbon Potential\", subtitle]\r\n            },\r\n            legend: {\r\n              position: \"bottom\"\r\n            },\r\n            zoom: {\r\n              zoom: {\r\n                min: 1,\r\n                max: 1000,\r\n                wheel: {\r\n                  enabled: true // SET SCROOL ZOOM TO TRUE\r\n                },\r\n                drag: {\r\n                  enabled: false // SET SCROOL ZOOM TO TRUE\r\n                },\r\n                mode: \"x\",\r\n                speed: 100\r\n              },\r\n              pan: {\r\n                enabled: false,\r\n                mode: \"xy\",\r\n                speed: 100\r\n              }\r\n            },\r\n            datalabels: {\r\n              display: displayValues,\r\n              color: \"black\",\r\n              align: \"end\",\r\n              padding: {\r\n                right: 2\r\n              },\r\n              labels: {\r\n                padding: { top: 10 },\r\n                title: {\r\n                  font: {\r\n                    //weight: \"bold\"\r\n                  }\r\n                },\r\n                value: {\r\n                  color: \"green\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          scales: {\r\n            y: {\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"left\",\r\n              ticks: {\r\n                callback: function (value, index, ticks) {\r\n                  return value + \" Â°C\";\r\n                }\r\n              }\r\n            },\r\n            y1: {\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"right\",\r\n              grid: {\r\n                drawOnChartArea: false\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, ticks) {\r\n                  return value + \" CP\";\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from \"react\";\nimport { Chart2 } from \"./Chart\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./styles.css\";\nimport moment from \"moment\";\nimport html2canvas from \"html2canvas\";\nimport pdfConverter from \"jspdf\";\n\nexport default function App() {\n  // const [chartData, setChartData] = useState({});\n  //const [url, setUrl] = useState(null);\n  const [displayValues, setDisplayValues] = useState(false);\n  const [fromTime, setFromTime] = useState(\"\");\n  const [toTime, setToTime] = useState(\"\");\n  const [furnace, setFurnace] = useState(\"\");\n  const [customer, setCustomer] = useState(\"\");\n  const [material, setMaterial] = useState(\"\");\n  const [partName, setPartName] = useState(\"\");\n  const [partNumber, setPartNumber] = useState(\"\");\n  const [process, setProcess] = useState(\"\");\n  const [batchNo, setBatchNo] = useState(\"\");\n  const [batchQty, setBatchQty] = useState(\"\");\n  const [soakingStart, setSoakingStart] = useState(\"\");\n  const [soakingEnd, setSoakingEnd] = useState(\"\");\n  const [totalSoakingTime, setTotalSoakingTime] = useState(\"\");\n  const [subTitle, setSubTitle] = useState(\"\");\n  const [interval, setInterval] = useState(\"\");\n\n  const handleChangeFromTime = (data) => {\n    // setChartData({});\n    setFromTime(data);\n  };\n  const handleChangeToTime = (data) => {\n    // setChartData({});\n    setToTime(data);\n  };\n\n  const options = [\n    //actual,set [ft,ot,cv]\n    { value: \"CH1,CH15,CH3,CH19,CH2,CH16\", label: \"SQF1\" },\n    { value: \"CH4,CH18,CH6,CH20,CH5,CH17\", label: \"SQF2\" },\n    { value: \"CH7,CH24,CH100,CH1,CH1,CH1\", label: \"TF1\" },\n    { value: \"CH8,CH25,CH1,CH1,CH1,CH1\", label: \"TF2\" },\n    { value: \"CH9,CH28,CH1,CH1,CH1,CH1\", label: \"TF3\" },\n    { value: \"CH10,CH22,CH12,CH21,CH11,CH23\", label: \"GCF\" },\n    { value: \"CH13,CH27,CH1,CH1,CH1,CH1\", label: \"THF1\" },\n    { value: \"CH14,CH26,CH1,CH1,CH1,CH1\", label: \"THF2\" }\n  ];\n\n  let makeSubTitle = () => {\n    const customerString = \"Customer: \" + customer;\n    const materialString = \" | Material: \" + material;\n    const partNameString = \" | Part Name: \" + partName;\n    const partNumberString = \" | Part Number: \" + partNumber;\n    const processString = \" | Process: \" + process;\n    const batchNoString = \" | Batch No: \" + batchNo;\n    const batchQtyString = \" | Batch Qty: \" + batchQty;\n    const soakingStartString = \" | Soaking Start: \" + soakingStart;\n    const soakingEndString = \" | Batch Qty: \" + soakingEnd;\n    const totalSoakingTimeString = \" | Batch Qty: \" + totalSoakingTime;\n\n    setSubTitle(\n      customerString +\n        materialString +\n        partNameString +\n        partNumberString +\n        processString +\n        batchNoString +\n        batchQtyString +\n        soakingStartString +\n        soakingEndString +\n        totalSoakingTimeString\n    );\n  };\n\n  const getTimePortion = (item) => {\n    let time = item.timestamp;\n    return time.substring(11, 16);\n  };\n\n  const exportChart = (e) => {\n    //const but = e.target;\n    //but.style.display = \"none\";\n    let input = window.document.getElementsByClassName(\"App ChartDiv\")[0];\n\n    html2canvas(input).then((canvas) => {\n      console.log(canvas.width + \"  \" + canvas.height);\n      const img = canvas.toDataURL(\"image/jpg\");\n      const pdf = new pdfConverter(\n        \"l\",\n        \"pt\",\n        [canvas.width, canvas.height],\n        true\n      );\n      pdf.addImage(img, \"JPEG\", 1, 1, canvas.width, canvas.height);\n      pdf.save(\"chart.pdf\");\n      //but.style.display = \"block\";\n    });\n  };\n\n  const [chartData, setChartData] = useState(null);\n  const fetchPrices = async (url, fromTime, toTime, furnace, interval) => {\n    const subTitle = makeSubTitle();\n    console.log(subTitle);\n    url =\n      url +\n      \"?fromTime=\" +\n      moment(fromTime).format(\"YYYY-MM-DD HH:mm:ss\") +\n      \"&toTime=\" +\n      moment(toTime).format(\"YYYY-MM-DD HH:mm:ss\") +\n      \"&furnace=\" +\n      furnace +\n      \"&interval=\" +\n      interval;\n    console.log(url);\n    const res = await fetch(url);\n    const data = await res.json();\n    setChartData({\n      labels: data.data.map((item) => getTimePortion(item)),\n      datasets: [\n        {\n          label: \"Actual Process Temp\",\n          data: data.data.map((item) => item.actualMv),\n          borderColor: \"#ff6384\",\n          backgroundColor: \"#ff6384\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Set Process Temp\",\n          data: data.data.map((item) => item.setMv),\n          borderColor: \"#ff6384\",\n          backgroundColor: \"#ff6384\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Actual Oil Temp\",\n          data: data.data.map((item) => item.actualOt),\n          borderColor: \"#36a2eb\",\n          backgroundColor: \"#36a2eb\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Set Oil Temp\",\n          data: data.data.map((item) => item.setOt),\n          borderColor: \"#36a2eb\",\n          backgroundColor: \"#36a2eb\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Actual % CP\",\n          data: data.data.map((item) => item.actualCp),\n          borderColor: \"#cc65fe\",\n          backgroundColor: \"#cc65fe\",\n          yAxisID: \"y1\"\n        },\n        {\n          label: \"Set % CP\",\n          data: data.data.map((item) => item.setCp),\n          borderColor: \"#cc65fe\",\n          backgroundColor: \"#cc65fe\",\n          yAxisID: \"y1\"\n        }\n      ]\n    });\n  };\n\n  // useEffect(() => {\n  //   //fetchPrices();\n  // }, [setChartData]);\n\n  // const [url, setUrl] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App FormDiv\">\n        <br />\n        <div className=\"DatePicker\">\n          From{\" \"}\n          <DatePicker\n            selected={fromTime}\n            onChange={handleChangeFromTime}\n            dateFormat=\"yyyy-MM-dd HH:mm:ss\"\n            timeInputLabel=\"Time:\"\n            timeFormat=\"HH:mm\"\n            startDate={fromTime}\n            endDate={toTime}\n            showTimeSelect\n            // selectsStart\n            // withPortal\n          />\n          <br />\n          To{\" \"}\n          <DatePicker\n            selected={toTime}\n            onChange={handleChangeToTime}\n            dateFormat=\"yyyy-MM-dd HH:mm:ss\"\n            timeInputLabel=\"Time:\"\n            timeFormat=\"HH:mm:ss\"\n            startDate={fromTime}\n            endDate={toTime}\n            minDate={fromTime}\n            showTimeSelect\n            // selectsEnd\n            // withPortal\n          />\n        </div>\n        <div>\n          Furnace\n          <select\n            className=\"select\"\n            value={furnace}\n            onChange={(e) => {\n              setFurnace(e.target.value);\n            }}\n          >\n            {options.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label} = ({option.value})\n              </option>\n            ))}\n          </select>\n          <br />\n          Customer{\" \"}\n          <input\n            className=\"input10\"\n            onChange={(e) => {\n              setCustomer(e.target.value);\n            }}\n          />\n          <br />\n          Material{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setMaterial(e.target.value);\n            }}\n          />\n          <br />\n          Part Name{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setPartName(e.target.value);\n            }}\n          />\n          <br />\n          Part No.{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setPartNumber(e.target.value);\n            }}\n          />\n          <br />\n          Process{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setProcess(e.target.value);\n            }}\n          />\n          <br />\n          <br />\n          Batch Qty.{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setBatchQty(e.target.value);\n            }}\n          />\n          <br />\n          Batch No.{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setBatchNo(e.target.value);\n            }}\n          />\n          <br />\n          Soaking Start{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setSoakingStart(e.target.value);\n            }}\n          />\n          <br />\n          Soaking End{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setSoakingEnd(e.target.value);\n            }}\n          />\n          <br />\n          Total Soaking Time{\" \"}\n          <input\n            className=\"input5\"\n            onChange={(e) => {\n              setTotalSoakingTime(e.target.value);\n            }}\n          />\n          <br />\n          Interval{\" \"}\n          <input\n            type=\"number\"\n            className=\"input4\"\n            onChange={(e) => {\n              setInterval(e.target.value);\n            }}\n          />\n          <br />\n          {/* {fromTime && toTime && furnace ? ( */}\n          <div>\n            <button\n              className=\"button\"\n              onClick={() =>\n                fetchPrices(\n                  \"http://localhost:8082/data\",\n                  fromTime,\n                  toTime,\n                  furnace,\n                  interval\n                )\n              }\n            >\n              Draw\n            </button>\n            <button className=\"button\" onClick={(e) => exportChart(e)}>\n              Export\n            </button>\n            <button\n              className=\"button\"\n              onClick={() =>\n                setDisplayValues((displayValues) => !displayValues)\n              }\n            >\n              Reading\n            </button>{\" \"}\n          </div>\n          {/* ) : null} */}\n          {/* <button\n            className=\"button\"\n            onClick={() =>\n              fetchPrices(\n                \"https://mocki.io/v1/076ea4df-b52b-4ad5-b6ff-59ba5ea062b0\"\n              )\n            }\n          >\n            Data B\n          </button> */}\n          <button className=\"button\" onClick={() => setChartData({})}>\n            Reset\n          </button>\n        </div>\n      </div>\n      <div className=\"App ChartDiv\">\n        <Chart2\n          chartData={chartData}\n          displayValues={displayValues}\n          subtitle={subTitle ? subTitle : \"\"}\n        />\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}